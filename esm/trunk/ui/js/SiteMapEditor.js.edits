/*////////////////////////////////////
///	Class:			Site Map Editor Object for 2006 Platform
/// Hired Gun: 		Matthew Gaddis <matthew@spiremedia.com>
/// Written:		2006-05-11
/// Dependancies:	/ui/js/prototype.js 		version: 1.5 or greater
///					/ui/js/controls.js			version: scriptacolous 1.6.0 or greater
///					/ui/js/dragdrop.js			version: scriptacolous 1.6.0 or greater
///					/ui/js/effects.js			version: scriptacolous 1.6.0 or greater
/*/////////////////////////////////////


var SiteMapEditor = 
{
	e: {},
	i: [
		'sitemap_section_ul', 
		'sitemap_sidebar_ul',
		'sitemap_ajax_form',
		'sitemap_ajax_order',
		'sitemap_ajax_id',
		'sitemap_ajax_method'
	],
	
	
	delayedInit: function()
	{
		setTimeout('SiteMapEditor.loadSection()', 1000);
		setTimeout('SiteMapEditor.loadSidebar()', 1000);
	},
	
	
	init: function()
	{
		///
		/// 1. Set all elements of interest ( those in SiteMapEditor.i ) into SiteMapEditor.e
		/// 2. Initialize the sidebar sortable
		/// 3. Initialize the section sortable
		///
		
		var s = SiteMapEditor;
		
		// 1.
		$A(s.i).each ( function(e) { s.e[e] = $(e); } );
		// 2. 
		s.loadSidebar();
		// 3.
		s.loadSection();
	},
	
	loadSection: function()
	{
		Sortable.create
		(
			SiteMapEditor.e.sitemap_section_ul.id, 
			{
				containment: [SiteMapEditor.e.sitemap_section_ul.id, SiteMapEditor.e.sitemap_sidebar_ul.id], 
				constraint: false,
				dropOnEmpty: true,
				only: 'drag',
				onChange: SiteMapEditor.onChangeEventHandler,
				onUpdate: SiteMapEditor.onUpdateEventHandler
			}
		);
		
		$A(SiteMapEditor.e.sitemap_section_ul.getElementsByTagName('a')).each
		( function(e) { e.onclick = function() { alert('!'); return true; } } );
	},
	
	loadSidebar: function()
	{
		var a = $A(SiteMapEditor.e.sitemap_sidebar_ul.getElementsByTagName('a'));
		
		a.each
		( 
		 	function(e) 
			{ 
				e = $(e);
				//Trace.out('e.innerHTML: ' + e.innerHTML);
				e.onclick = function() { return false; } 
				e.removeClassName('alternate');
			}
		);
		
		//Trace.out('sidebar.id:' + SiteMapEditor.e.sitemap_sidebar_ul.id);
		
		Sortable.create
		(
			SiteMapEditor.e.sitemap_sidebar_ul.id, 
			{
				containment: [SiteMapEditor.e.sitemap_section_ul.id],
				dropOnEmpty: true, 
				constraint: false,
				only: 'drag',
				onChange: SiteMapEditor.onChangeEventHandler,
				onUpdate: SiteMapEditor.onUpdateEventHandlerSidebar 
			}
		);

	},
	
	mouseupEventHandler: function(e)
	{
		var i = 0, order = 1, serializedForm;
		
		/*/
		///
		///	Ajax Calls via serialization of ajaxform. 
		/// basic rules here is to switch against the id of the element's parent container
		/// sitemap_section_ul: void renderDefaultView(siteid, smid, order, id)
		/// sitemap_sidebar_ul: string renderInactivePagesView(siteid, id)
		///
		/*/
		
		//Trace.out('mouseup:' + SiteMapEditor.mouseupEventHandlerSet);
		
		switch( $ ( SiteMapEditor.mouseupEventHandlerSet ).parentNode.id )
		{
			case 'sitemap_section_ul':
			
				///
				/// 1. change the method to renderDefaultView
				/// 2. set the order value
				/// 3. set the id value
				/// 4. submit ajax request with serialized form data
				///
				
				// 1.
				SiteMapEditor.e.sitemap_ajax_method.value = 'renderDefaultView';
				// 2.
				$A ( SiteMapEditor.e.sitemap_section_ul.getElementsByTagName ( 'li' ) ).each 
				( function(e) { i++; if ( e.id == SiteMapEditor.mouseupEventHandlerSet ) order = i; } );
				
				SiteMapEditor.e.sitemap_ajax_order.value = order;
				// 3.
				SiteMapEditor.e.sitemap_ajax_id.value = SiteMapEditor.mouseupEventHandlerSet;
				// 4.
				serializedForm = Form.serialize( SiteMapEditor.e.sitemap_ajax_form );
				
				//Trace.out(serializedForm);
				
				new Ajax.Request 
				( 
				 	SiteMapEditor.e.sitemap_ajax_form.getAttribute( 'action' ), 
					{
						postBody: serializedForm
					} 
				);

				break;
				
			case 'sitemap_sidebar_ul':
				
				///
				/// 1. change the method to renderInactivePagesView
				/// 2. change the id
				/// 3. change the order
				/// 4. submit ajax request with serialized form data and setting request onSuccess 
				/// 5. update sitemap_sidebar_ul with new content from onSuccess
				///
				
				// 1.
				SiteMapEditor.e.sitemap_ajax_method.value = 'renderInactivePagesView';
				// 2.
				SiteMapEditor.e.sitemap_ajax_id.value = SiteMapEditor.mouseupEventHandlerSet;
				// 3.
				$A ( SiteMapEditor.e.sitemap_sidebar_ul.getElementsByTagName ( 'li' ) ).each 
				( function(e) { i++; if ( e.id == SiteMapEditor.mouseupEventHandlerSet ) order = i; } );
				
				SiteMapEditor.e.sitemap_ajax_order.value = order;
				// 4. 
				serializedForm = Form.serialize(SiteMapEditor.e.sitemap_ajax_form);
				
				//Trace.out(serializedForm);
				
				new Ajax.Request 
				( 
				 	SiteMapEditor.e.sitemap_ajax_form.getAttribute( 'action' ), 
					{
						postBody: serializedForm,
						// 5. (...)
						onSuccess: SiteMapEditor.onSuccess
					}
				);
				break;
		}
		
		// Event.stopObserving(element, name, observer, [useCapture]);
		Event.stopObserving(Event.element(e), 'mouseup', SiteMapEditor.mouseupEventHandler, false);
		SiteMapEditor.mouseupEventHandlerSet = null;
	},
	
	mouseupEventHandlerSet: null,
	
	onChangeEventHandler: function(e)
	{
		///
		/// This event handler is called when a sortable
		/// element is "picked up" and subsequently changed by dragging anywhere in the screen.
		/// 1. Only interested in capturing the element's id in the first call of this event handler
		/// so the mouseupEventHandler is set for this element specifically, the id is captured 
		/// 2. The element id is captured in SiteMap
		/// 3. Turn "off" the anchor tag for the duration of the drag action
		///
		
		//Trace.out('onchange:' + SiteMapEditor.mouseupEventHandlerSet + ' --- check');
		
		if(SiteMapEditor.mouseupEventHandlerSet == null)
		{	document.getElementById('foot').innerHTML += '<br />' + 'onChangeEventHandler: ' + new Date();
			// 1.
			Event.observe(e, 'mouseup', SiteMapEditor.mouseupEventHandler, false);
			// 2.
			SiteMapEditor.mouseupEventHandlerSet = e.id;
			
			//Trace.out('onchange:' + SiteMapEditor.mouseupEventHandlerSet + ' --- set');
			
			// 3.
			$A( e.getElementsByTagName('a') ).each ( function (a) { a = $(a); a.onclick = function() { return false; } } );
		}
	},
	
	onSuccess: function(r)
	{
		///
		/// Ok so there is a race condition here wherein the user drops an item in the 
		/// inactive pages list at which an ajax call is made to the server to update the sitemap
		/// this ajax call has onSuccess as its "onSuccess" event handler which writes content 
		/// to the same <ul> that is being dropped into. 
		/// The request can answer before the drop is complete and therefore will halt the drop action
		/// and leave the ui in a state of disarray. This is why the <ul> is updated on a setTimeout
		/// interval, it gives the drop action a chance to complete prior to answering the ajax 
		/// response.
		///
		
		SiteMapEditor.onSuccessContent = r.responseText;
		
		setTimeout('SiteMapEditor.e.sitemap_sidebar_ul.innerHTML += SiteMapEditor.onSuccessContent', 2000);
	},
	
	onSuccessContent: null,
	
	onUpdateEventHandler: function(e)
	{	document.getElementById('foot').innerHTML += '<br />' + 'onUpdateEventHandler: ' + new Date();
		var child = $A(e.getElementsByTagName('li'));
		child.each ( function(e) { if(e.className == '') e.style.display = (child.length == 1) ? 'block' : 'none'; } );
	},
	onUpdateEventHandlerSidebar: function(e)
	{
		SiteMapEditor.onUpdateEventHandler(e);
		SiteMapEditor.delayedInit();
	}
};

Pre.meditate(SiteMapEditor.init);